import streamlit as st
import pandas as pd
import joblib
import numpy as np
from processamento import preprocessar_texto
import matplotlib.pyplot as plt
import seaborn as sns

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Classificador de Dificuldades Acad√™micas",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Carregar modelos e recursos
@st.cache_resource
def carregar_modelos():
    try:
        modelo = joblib.load(r'C:\Users\victo\OneDrive\√Årea de Trabalho\trabalho_topicos\modelo_naive_bayes.pkl')
        vectorizer = joblib.load(r'C:\Users\victo\OneDrive\√Årea de Trabalho\trabalho_topicos\vectorizer.pkl')
        categorias = {
            0: 'Dificuldade com Leitura',
            1: 'Dificuldade com Matem√°tica',
            2: 'Ansiedade/Estresse',
            3: 'Falta de Concentra√ß√£o',
            4: 'Problemas de Organiza√ß√£o',
            5: 'Dificuldade com Prazos'
        }
        return modelo, vectorizer, categorias
    except Exception as e:
        st.error(f"Erro ao carregar modelos: {e}")
        return None, None, None

modelo, vectorizer, categorias = carregar_modelos()

# Interface do usu√°rio
def main():
    st.title("üìö Classificador de Dificuldades Acad√™micas")
    st.markdown("""
    Este sistema utiliza Processamento de Linguagem Natural (PLN) para classificar relatos de estudantes 
    em categorias de dificuldades acad√™micas. Insira um texto no campo abaixo para an√°lise.
    """)
    
    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.header("Sobre o Projeto")
        st.markdown("""
        **Objetivo**: Classificar textos de estudantes em categorias de dificuldades acad√™micas para auxiliar professores e gestores.
        
        **Tecnologias**:
        - Python
        - Streamlit (interface)
        - Scikit-learn (modelos de ML)
        - NLP (pr√©-processamento)
        
        **Categorias**:
        1. Dificuldade com Leitura
        2. Dificuldade com Matem√°tica
        3. Ansiedade/Estresse
        4. Falta de Concentra√ß√£o
        5. Problemas de Organiza√ß√£o
        6. Dificuldade com Prazos
        """)
        
        st.header("Desenvolvedores")
        st.markdown("""
        - Victor Gabriel Cunha Rodrigues
        - Lorrana Evelyn de Ara√∫jo Pereira
        """)
        
        st.header("Universidade Federal do Piau√≠")
        st.markdown("Curso de Tecnologia de Gest√£o de Dados")
    
    # √Årea de entrada de texto
    with st.container():
        col1, col2 = st.columns([3, 1])
        
        with col1:
            texto_input = st.text_area(
                "Digite o relato do estudante:",
                height=200,
                placeholder="Ex: Estou tendo muita dificuldade para entender os textos longos das aulas de hist√≥ria..."
            )
            
        with col2:
            st.markdown("**Exemplos para testar:**")
            st.markdown("- 'N√£o consigo resolver equa√ß√µes de segundo grau'")
            st.markdown("- 'Fico muito nervoso nas provas e esque√ßo tudo'")
            st.markdown("- 'Sempre deixo tudo para a √∫ltima hora'")
    
    # Bot√£o de classifica√ß√£o
    if st.button("Classificar Dificuldade", use_container_width=True):
        if not texto_input.strip():
            st.warning("Por favor, insira um texto para classifica√ß√£o.")
        elif modelo and vectorizer and categorias:
            with st.spinner("Analisando o texto..."):
                # Pr√©-processamento
                texto_processado = preprocessar_texto(texto_input)
                
                # Vetoriza√ß√£o
                texto_vetorizado = vectorizer.transform([texto_processado])
                
                # Predi√ß√£o
                probabilidades = modelo.predict_proba(texto_vetorizado)[0]
                predicao = np.argmax(probabilidades)
                
                # Resultados
                st.subheader("Resultado da Classifica√ß√£o")
                
                # Gr√°fico de probabilidades
                fig, ax = plt.subplots(figsize=(10, 5))
                sns.barplot(
                    x=probabilidades, 
                    y=list(categorias.values()),
                    palette="viridis",
                    ax=ax
                )
                ax.set_title("Probabilidade por Categoria")
                ax.set_xlabel("Probabilidade")
                ax.set_ylabel("Categoria")
                st.pyplot(fig)
                
                # Detalhes da predi√ß√£o
                st.success(f"**Categoria mais prov√°vel:** {categorias[predicao]}")
                
                # Tabela de probabilidades
                prob_df = pd.DataFrame({
                    "Categoria": categorias.values(),
                    "Probabilidade": probabilidades
                }).sort_values("Probabilidade", ascending=False)
                
                st.dataframe(
                    prob_df.style.format({"Probabilidade": "{:.2%}"}),
                    use_container_width=True
                )
                
                # Sugest√µes baseadas na categoria
                st.subheader("Sugest√µes de Apoio")
                if predicao == 0:  # Leitura
                    st.markdown("""
                    - Praticar leitura di√°ria de textos curtos
                    - Usar marcadores de texto para identificar ideias principais
                    - Participar de grupos de estudo de interpreta√ß√£o
                    """)
                elif predicao == 1:  # Matem√°tica
                    st.markdown("""
                    - Revisar conceitos b√°sicos que s√£o pr√©-requisitos
                    - Fazer exerc√≠cios gradativamente mais complexos
                    - Usar aplicativos de aprendizagem matem√°tica
                    """)
                elif predicao == 2:  # Ansiedade
                    st.markdown("""
                    - Praticar t√©cnicas de respira√ß√£o antes de provas
                    - Dividir tarefas grandes em partes menores
                    - Buscar apoio psicol√≥gico se necess√°rio
                    """)
                elif predicao == 3:  # Concentra√ß√£o
                    st.markdown("""
                    - Estudar em ambientes silenciosos e organizados
                    - Usar t√©cnicas Pomodoro (25min estudo + 5min descanso)
                    - Evitar multitarefas durante o estudo
                    """)
                elif predicao == 4:  # Organiza√ß√£o
                    st.markdown("""
                    - Usar agendas ou aplicativos de planejamento
                    - Criar listas de tarefas di√°rias
                    - Estabelecer rotinas de estudo fixas
                    """)
                elif predicao == 5:  # Prazos
                    st.markdown("""
                    - Dividir trabalhos grandes em etapas com prazos intermedi√°rios
                    - Come√ßar tarefas imediatamente ap√≥s serem passadas
                    - Usar lembretes para entregas importantes
                    """)
        else:
            st.error("Modelo n√£o carregado corretamente. Por favor, verifique os arquivos de modelo.")

    # Se√ß√£o para an√°lise de arquivos CSV (para uso dos professores)
    st.divider()
    st.subheader("An√°lise em Lote (para Professores)")
    
    arquivo = st.file_uploader(
        "Carregue um arquivo CSV com m√∫ltiplos relatos para an√°lise em lote",
        type=["csv"],
        accept_multiple_files=False
    )
    
    if arquivo is not None:
        try:
            df = pd.read_csv(arquivo)
            
            if 'texto' not in df.columns:
                st.warning("O arquivo CSV deve conter uma coluna chamada 'texto' com os relatos.")
            else:
                with st.spinner("Processando m√∫ltiplos relatos..."):
                    # Pr√©-processamento
                    df['texto_processado'] = df['texto'].apply(preprocessar_texto)
                    
                    # Vetoriza√ß√£o
                    X = vectorizer.transform(df['texto_processado'])
                    
                    # Predi√ß√£o
                    probabilidades = modelo.predict_proba(X)
                    predicoes = np.argmax(probabilidades, axis=1)
                    
                    # Adicionar resultados ao DataFrame
                    df['categoria'] = [categorias[p] for p in predicoes]
                    df['categoria_num'] = predicoes
                    
                    # Mostrar resultados
                    st.success(f"Processamento conclu√≠do para {len(df)} relatos!")
                    
                    # Gr√°fico de distribui√ß√£o
                    st.subheader("Distribui√ß√£o das Categorias")
                    contagem = df['categoria'].value_counts()
                    
                    fig2, ax2 = plt.subplots(figsize=(10, 5))
                    sns.barplot(
                        x=contagem.values,
                        y=contagem.index,
                        palette="rocket",
                        ax=ax2
                    )
                    ax2.set_title("Quantidade de Relatos por Categoria")
                    ax2.set_xlabel("N√∫mero de Relatos")
                    ax2.set_ylabel("Categoria")
                    st.pyplot(fig2)
                    
                    # Tabela com resultados
                    st.dataframe(
                        df[['texto', 'categoria']],
                        use_container_width=True,
                        hide_index=True
                    )
                    
                    # Bot√£o para download
                    st.download_button(
                        label="Baixar Resultados",
                        data=df.to_csv(index=False).encode('utf-8'),
                        file_name="relatos_classificados.csv",
                        mime="text/csv"
                    )
                    
        except Exception as e:
            st.error(f"Erro ao processar arquivo: {e}")

if __name__ == "__main__":
    main()